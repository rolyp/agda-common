{-# OPTIONS --sized-types #-}

open import Relation.Binary
open import Relation.Binary.PropositionalEquality renaming (isEquivalence to ‚â°-isEquivalence)

-- A list of (key, value) pairs, sorted by key in strictly descending order.
module Ext.Data.FiniteMap
   {ùíå ùíó ‚Ñì}
   {Key : Set ùíå}
   (Value : Key ‚Üí Set ùíó)
   {_<_ : Rel Key ‚Ñì}
   (isStrictTotalOrder‚Ä≤ : IsStrictTotalOrder _‚â°_ _<_)
   where

   open import Algebra.FunctionProperties
   open import Algebra.Structures
   open import Data.Empty
   open import Data.Product
   open import Data.Unit hiding (setoid)
   open import Function
   open import Level
   open import Size

   open import Ext.Data.Extended-key isStrictTotalOrder‚Ä≤

   module Indexed where
      open IsStrictTotalOrder isStrictTotalOrder renaming (trans to <‚Å∫-trans)

      -- The bounds are not tight.
      data FiniteMap (l u : Key‚Å∫) : {Œπ : Size} ‚Üí Set (ùíå ‚äî ùíó ‚äî ‚Ñì) where
         [] : {Œπ : _} ‚Üí .(l <‚Å∫ u) ‚Üí FiniteMap l u {‚Üë Œπ}
         _‚Ü¶_‚à∑[_]_ : {Œπ : _} (k : Key) (v : Value k) ‚Üí
                     .(l <‚Å∫ [ k ]) ‚Üí (m : FiniteMap [ k ] u {Œπ}) ‚Üí FiniteMap l u {‚Üë Œπ}

      infixr 3 _‚Ü¶_‚à∑[_]_

      unionWith‚Ä≤ : ‚àÄ {l u} ‚Üí (‚àÄ {k} ‚Üí Op‚ÇÇ (Value k)) ‚Üí
                  {Œπ : _} ‚Üí FiniteMap l u {Œπ} ‚Üí {Œπ‚Ä≤ : _} ‚Üí FiniteMap l u {Œπ‚Ä≤} ‚Üí FiniteMap l u
      unionWith‚Ä≤ _ ([] l<u) ([] _) = [] l<u
      unionWith‚Ä≤ _ ([] _) m = m
      unionWith‚Ä≤ _ m ([] _ )= m
      unionWith‚Ä≤ ‚àô (k ‚Ü¶ v ‚à∑[ _ ] m) (k‚Ä≤ ‚Ü¶ v‚Ä≤ ‚à∑[ _ ] m‚Ä≤) with compare [ k ] [ k‚Ä≤ ]
      ... | (tri< _ _ _) = k ‚Ü¶ v ‚à∑[ _ ] unionWith‚Ä≤ ‚àô m (k‚Ä≤ ‚Ü¶ v‚Ä≤ ‚à∑[ _ ] m‚Ä≤)
      unionWith‚Ä≤ ‚àô (k ‚Ü¶ v ‚à∑[ l<k ] m) (.k ‚Ü¶ v‚Ä≤ ‚à∑[ _ ] m‚Ä≤) | (tri‚âà _ refl _) =
         k ‚Ü¶ (v ‚ü® ‚àô ‚ü© v‚Ä≤) ‚à∑[ l<k ] unionWith‚Ä≤ ‚àô m m‚Ä≤
      ... | (tri> _ _ _) = k‚Ä≤ ‚Ü¶ v‚Ä≤ ‚à∑[ _ ] unionWith‚Ä≤ ‚àô (k ‚Ü¶ v ‚à∑[ _ ] m) m‚Ä≤

      unionWith : ‚àÄ {l u} ‚Üí (‚àÄ {k} ‚Üí Op‚ÇÇ (Value k)) ‚Üí Op‚ÇÇ (FiniteMap l u)
      unionWith ‚àô x y = unionWith‚Ä≤ ‚àô x y

      comm‚Ä≤ : ‚àÄ {l u} {‚àô : ‚àÄ {k} ‚Üí Op‚ÇÇ (Value k)} ‚Üí (‚àÄ {k} ‚Üí Commutative _‚â°_ (‚àô {k})) ‚Üí
             {Œπ : _} (x : FiniteMap l u {Œπ}) {Œπ‚Ä≤ : _} (y : FiniteMap l u {Œπ‚Ä≤}) ‚Üí unionWith‚Ä≤ ‚àô x y ‚â° unionWith‚Ä≤ ‚àô y x
      comm‚Ä≤ _ ([] _) ([] _) = refl
      comm‚Ä≤ _ ([] _) (_ ‚Ü¶ _ ‚à∑[ _ ] _) = refl
      comm‚Ä≤ _ (_ ‚Ü¶ _ ‚à∑[ _ ] _) ([] _) = refl
      comm‚Ä≤ comm-‚àô (k ‚Ü¶ _ ‚à∑[ _ ] _) (k‚Ä≤ ‚Ü¶ _ ‚à∑[ _ ] _) with compare [ k ] [ k‚Ä≤ ] | compare [ k‚Ä≤ ] [ k ]
      comm‚Ä≤ comm-‚àô (k ‚Ü¶ v ‚à∑[ _ ] m) (k‚Ä≤ ‚Ü¶ v‚Ä≤ ‚à∑[ _ ] m‚Ä≤) | (tri< k<k‚Ä≤_ _ _) | (tri> _ _ _) =
         cong (Œª m ‚Üí k ‚Ü¶ v ‚à∑[ _ ] m) (sym (comm‚Ä≤ comm-‚àô (k‚Ä≤ ‚Ü¶ v‚Ä≤ ‚à∑[ _ ] m‚Ä≤) m))
      comm‚Ä≤ comm-‚àô (k ‚Ü¶ v ‚à∑[ l<k ] m) (.k ‚Ü¶ v‚Ä≤ ‚à∑[ _ ] m‚Ä≤) | (tri‚âà _ refl _) | (tri‚âà _ refl _) =
         cong‚ÇÇ (Œª v m ‚Üí k ‚Ü¶ v ‚à∑[ l<k ] m) (comm-‚àô v v‚Ä≤) (comm‚Ä≤ comm-‚àô m m‚Ä≤)
      comm‚Ä≤ comm-‚àô (k ‚Ü¶ v ‚à∑[ _ ] m) (k‚Ä≤ ‚Ü¶ v‚Ä≤ ‚à∑[ _ ] m‚Ä≤) | (tri> _ _ k‚Ä≤<k) | (tri< _ _ _) =
         cong (Œª m ‚Üí k‚Ä≤ ‚Ü¶ v‚Ä≤ ‚à∑[ _ ] m) (comm‚Ä≤ comm-‚àô (k ‚Ü¶ v ‚à∑[ _ ] m) m‚Ä≤)
      comm‚Ä≤ _ (_ ‚Ü¶ _ ‚à∑[ _ ] _) (_ ‚Ü¶ _ ‚à∑[ _ ] _) | (tri< k<k‚Ä≤ _ _) | (tri‚âà _ _ k‚âÆk‚Ä≤) = ‚ä•-elim (k‚âÆk‚Ä≤ k<k‚Ä≤)
      comm‚Ä≤ _ (_ ‚Ü¶ _ ‚à∑[ _ ] _) (_ ‚Ü¶ _ ‚à∑[ _ ] _) | (tri< k<k‚Ä≤ _ _) | (tri< _ _ k‚âÆk‚Ä≤) = ‚ä•-elim (k‚âÆk‚Ä≤ k<k‚Ä≤)
      comm‚Ä≤ _ (_ ‚Ü¶ _ ‚à∑[ _ ] _) (_ ‚Ü¶ _ ‚à∑[ _ ] _) | (tri‚âà _ k‚â°k‚Ä≤ _) | (tri> _ k‚Ä≤‚â¢k _) = ‚ä•-elim (k‚Ä≤‚â¢k (sym k‚â°k‚Ä≤))
      comm‚Ä≤ _ (_ ‚Ü¶ _ ‚à∑[ _ ] _) (_ ‚Ü¶ _ ‚à∑[ _ ] _) | (tri‚âà _ k‚â°k‚Ä≤ _) | (tri< _ k‚Ä≤‚â¢k _) = ‚ä•-elim (k‚Ä≤‚â¢k (sym k‚â°k‚Ä≤))
      comm‚Ä≤ _ (_ ‚Ü¶ _ ‚à∑[ _ ] _) (_ ‚Ü¶ _ ‚à∑[ _ ] _) | (tri> _ _ k‚Ä≤<k) | (tri> k‚Ä≤‚âÆk _ _) = ‚ä•-elim (k‚Ä≤‚âÆk k‚Ä≤<k)
      comm‚Ä≤ _ (_ ‚Ü¶ _ ‚à∑[ _ ] _) (_ ‚Ü¶ _ ‚à∑[ _ ] _) | (tri> _ _ k‚Ä≤<k) | (tri‚âà k‚Ä≤‚âÆk _ _) = ‚ä•-elim (k‚Ä≤‚âÆk k‚Ä≤<k)

      comm : ‚àÄ {l u} {‚àô : ‚àÄ {k} ‚Üí Op‚ÇÇ (Value k)} ‚Üí
             (‚àÄ {k} ‚Üí Commutative _‚â°_ (‚àô {k})) ‚Üí Commutative _‚â°_ (unionWith {l} {u} ‚àô)
      comm comm-‚àô x y = comm‚Ä≤ comm-‚àô x y

      -- Trivial lemmas that are immediate from the definition of unionWith‚Ä≤, but that Agda requires us to have.
      -- There is a lemma for each way the comparison can go.
      unionWith‚Ä≤‚â° : ‚àÄ {k v v‚Ä≤ l u} {‚àô : ‚àÄ {k} ‚Üí Op‚ÇÇ (Value k)} (l<k : l <‚Å∫ [ k ]) {Œπ‚ÇÅ : _}
                   (m : FiniteMap [ k ] u {Œπ‚ÇÅ}) {Œπ‚ÇÇ : _} (m‚Ä≤ : FiniteMap [ k ] u {Œπ‚ÇÇ}) ‚Üí
                   unionWith‚Ä≤ {l} ‚àô (k ‚Ü¶ v ‚à∑[ l<k ] m) (k ‚Ü¶ v‚Ä≤ ‚à∑[ l<k ] m‚Ä≤) ‚â° (k ‚Ü¶ (‚àô v v‚Ä≤) ‚à∑[ l<k ] unionWith‚Ä≤ ‚àô m m‚Ä≤)
      unionWith‚Ä≤‚â° {k} _ _ _ with compare [ k ] [ k ]
      unionWith‚Ä≤‚â° _ _ _ | tri< _ k‚â¢k _ = ‚ä•-elim (k‚â¢k refl)
      unionWith‚Ä≤‚â° _ _ _ | tri‚âà _ refl _ = refl
      unionWith‚Ä≤‚â° _ _ _ | tri> _ k‚â¢k _ = ‚ä•-elim (k‚â¢k refl)

      unionWith‚Ä≤< : ‚àÄ {k k‚Ä≤ v v‚Ä≤ l u} {‚àô : ‚àÄ {k} ‚Üí Op‚ÇÇ (Value k)}
                    (l<k : l <‚Å∫ [ k ]) (l<k‚Ä≤ : l <‚Å∫ [ k‚Ä≤ ]) (k<k‚Ä≤ : [ k ] <‚Å∫ [ k‚Ä≤ ])
                    {Œπ‚ÇÅ : _} (m : FiniteMap [ k ] u {Œπ‚ÇÅ}) {Œπ‚ÇÇ : _} (m‚Ä≤ : FiniteMap [ k‚Ä≤ ] u {Œπ‚ÇÇ}) ‚Üí
                    unionWith‚Ä≤ {l} ‚àô (k ‚Ü¶ v ‚à∑[ l<k ] m) (k‚Ä≤ ‚Ü¶ v‚Ä≤ ‚à∑[ l<k‚Ä≤ ] m‚Ä≤) ‚â°
                    (k ‚Ü¶ v ‚à∑[ l<k ] unionWith‚Ä≤ ‚àô m (k‚Ä≤ ‚Ü¶ v‚Ä≤ ‚à∑[ k<k‚Ä≤ ] m‚Ä≤))
      unionWith‚Ä≤< {k} {k‚Ä≤} _ _ _ _ _ with compare [ k ] [ k‚Ä≤ ]
      unionWith‚Ä≤< _ _ _ _ _ | tri< _ _ _ = refl
      unionWith‚Ä≤< _ _ k<k‚Ä≤ _ _ | tri‚âà k‚âÆk‚Ä≤ _ _ = ‚ä•-elim (k‚âÆk‚Ä≤ k<k‚Ä≤)
      unionWith‚Ä≤< _ _ k<k‚Ä≤ _ _ | tri> k‚âÆk‚Ä≤ _ _ = ‚ä•-elim (k‚âÆk‚Ä≤ k<k‚Ä≤)

      unionWith‚Ä≤> : ‚àÄ {k k‚Ä≤ v v‚Ä≤ l u} {‚àô : ‚àÄ {k} ‚Üí Op‚ÇÇ (Value k)}
                    (l<k : l <‚Å∫ [ k ]) (l<k‚Ä≤ : l <‚Å∫ [ k‚Ä≤ ]) (k‚Ä≤<k : [ k‚Ä≤ ] <‚Å∫ [ k ])
                    {Œπ‚ÇÅ : _} (m : FiniteMap [ k ] u {Œπ‚ÇÅ}) {Œπ‚ÇÇ : _} (m‚Ä≤ : FiniteMap [ k‚Ä≤ ] u {Œπ‚ÇÇ}) ‚Üí
                    unionWith‚Ä≤ {l} ‚àô (k ‚Ü¶ v ‚à∑[ l<k ] m) (k‚Ä≤ ‚Ü¶ v‚Ä≤ ‚à∑[ l<k‚Ä≤ ] m‚Ä≤) ‚â°
                    (k‚Ä≤ ‚Ü¶ v‚Ä≤ ‚à∑[ l<k‚Ä≤ ] unionWith‚Ä≤ ‚àô (k ‚Ü¶ v ‚à∑[ k‚Ä≤<k ] m) m‚Ä≤)
      unionWith‚Ä≤> {k} {k‚Ä≤} _ _ _ _ _ with compare [ k ] [ k‚Ä≤ ]
      unionWith‚Ä≤> _ _ k‚Ä≤<k _ _ | tri< _ _ k‚Ä≤‚âÆk = ‚ä•-elim (k‚Ä≤‚âÆk k‚Ä≤<k)
      unionWith‚Ä≤> _ _ k‚Ä≤<k _ _ | tri‚âà _ _ k‚Ä≤‚âÆk = ‚ä•-elim (k‚Ä≤‚âÆk k‚Ä≤<k)
      unionWith‚Ä≤> _ _ _ _ _ | tri> _ _ _ = refl

      assoc‚Ä≤ : ‚àÄ {l u} {‚àô : ‚àÄ {k} ‚Üí Op‚ÇÇ (Value k)} ‚Üí (‚àÄ {k} ‚Üí Associative _‚â°_ (‚àô {k})) ‚Üí
              {Œπ‚ÇÅ : _} (x : FiniteMap l u {Œπ‚ÇÅ}) {Œπ‚ÇÇ : _} (y : FiniteMap l u {Œπ‚ÇÇ}) {Œπ‚ÇÉ : _} (z : FiniteMap l u {Œπ‚ÇÉ}) ‚Üí
              unionWith‚Ä≤ ‚àô (unionWith‚Ä≤ ‚àô x y) z ‚â° unionWith‚Ä≤ ‚àô x (unionWith‚Ä≤ ‚àô y z)
      assoc‚Ä≤ _ ([] _) ([] _) ([] _) = refl
      assoc‚Ä≤ _ ([] _) ([] _) (_ ‚Ü¶ _ ‚à∑[ _ ] _) = refl
      assoc‚Ä≤ _ ([] _) (_ ‚Ü¶ _ ‚à∑[ _ ] _) ([] _) = refl
      assoc‚Ä≤ _ ([] _) (k ‚Ü¶ _ ‚à∑[ _ ] _) (k‚Ä≤ ‚Ü¶ _ ‚à∑[ _ ] _) with compare [ k ] [ k‚Ä≤ ]
      assoc‚Ä≤ _ ([] _) (k ‚Ü¶ _ ‚à∑[ _ ] _) (.k ‚Ü¶ _ ‚à∑[ _ ] _) | tri‚âà _ refl _ = refl
      ... | tri< _ _ _ = refl
      ... | tri> _ _ _ = refl
      assoc‚Ä≤ _ (_ ‚Ü¶ _ ‚à∑[ _ ] _) ([] _) ([] _) = refl
      assoc‚Ä≤ _ (k ‚Ü¶ _ ‚à∑[ _ ] _) ([] _) (k‚Ä≤ ‚Ü¶ _ ‚à∑[ _ ] _) with compare [ k ] [ k‚Ä≤ ]
      assoc‚Ä≤ _ (k ‚Ü¶ _ ‚à∑[ _ ] _) ([] _) (.k ‚Ü¶ _ ‚à∑[ _ ] _) | tri‚âà _ refl _ = refl
      ... | tri< _ _ _ = refl
      ... | tri> _ _ _ = refl
      assoc‚Ä≤ _ (k ‚Ü¶ _ ‚à∑[ _ ] _) (k‚Ä≤ ‚Ü¶ _ ‚à∑[ _ ] _) ([] _) with compare [ k ] [ k‚Ä≤ ]
      assoc‚Ä≤ _ (k ‚Ü¶ _ ‚à∑[ _ ] _) (.k ‚Ü¶ _ ‚à∑[ _ ] _) ([] _) | tri‚âà _ refl _ = refl
      ... | tri< _ _ _ = refl
      ... | tri> _ _ _ = refl
      assoc‚Ä≤ _ (k‚ÇÅ ‚Ü¶ _ ‚à∑[ _ ] _) (k‚ÇÇ ‚Ü¶ _ ‚à∑[ _ ] _) (k‚ÇÉ ‚Ü¶ _ ‚à∑[ _ ] _)
            with compare [ k‚ÇÅ ] [ k‚ÇÇ ] | compare [ k‚ÇÇ ] [ k‚ÇÉ ] |
                 inspect (hide (compare [ k‚ÇÅ ]) [ k‚ÇÇ ]) unit | inspect (hide (compare [ k‚ÇÇ ]) [ k‚ÇÉ ]) unit
      assoc‚Ä≤ _ (k‚ÇÅ ‚Ü¶ _ ‚à∑[ _ ] _) (_ ‚Ü¶ _ ‚à∑[ _ ] _) (k‚ÇÉ ‚Ü¶ _ ‚à∑[ _ ] _) |
            tri< _ _ _ | tri< _ _ _ | [ eq ] | [ _ ] rewrite eq with compare [ k‚ÇÅ ] [ k‚ÇÉ ]
      assoc‚Ä≤ {l} {u} {‚àô} assoc-‚àô (k‚ÇÅ ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] m‚ÇÅ) (k‚ÇÇ ‚Ü¶ v‚ÇÇ ‚à∑[ _ ] m‚ÇÇ) (k‚ÇÉ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] m‚ÇÉ) |
            tri< k‚ÇÅ<k‚ÇÇ _ _ | tri< k‚ÇÇ<k‚ÇÉ _ _ | [ _ ] | [ _ ] | tri< k‚ÇÅ<k‚ÇÉ _ _ =
         begin
             k‚ÇÅ ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] unionWith‚Ä≤ ‚àô (unionWith‚Ä≤ ‚àô m‚ÇÅ (k‚ÇÇ ‚Ü¶ v‚ÇÇ ‚à∑[ _ ] m‚ÇÇ)) (k‚ÇÉ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] m‚ÇÉ)
         ‚â°‚ü® cong (Œª m ‚Üí k‚ÇÅ ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] m) (assoc‚Ä≤ assoc-‚àô m‚ÇÅ (k‚ÇÇ ‚Ü¶ v‚ÇÇ ‚à∑[ _ ] m‚ÇÇ) (k‚ÇÉ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] m‚ÇÉ)) ‚ü©
            k‚ÇÅ ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] unionWith‚Ä≤ ‚àô m‚ÇÅ (unionWith‚Ä≤ ‚àô (k‚ÇÇ ‚Ü¶ v‚ÇÇ ‚à∑[ _ ] m‚ÇÇ) (k‚ÇÉ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] m‚ÇÉ))
         ‚â°‚ü® cong (Œª m ‚Üí k‚ÇÅ ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] unionWith‚Ä≤ ‚àô m‚ÇÅ m) (unionWith‚Ä≤< k‚ÇÅ<k‚ÇÇ k‚ÇÅ<k‚ÇÉ k‚ÇÇ<k‚ÇÉ m‚ÇÇ m‚ÇÉ) ‚ü©
            k‚ÇÅ ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] unionWith‚Ä≤ ‚àô m‚ÇÅ (k‚ÇÇ ‚Ü¶ v‚ÇÇ ‚à∑[ _ ] unionWith‚Ä≤ ‚àô m‚ÇÇ (k‚ÇÉ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] m‚ÇÉ))
         ‚àé where open import Relation.Binary.EqReasoning (setoid (FiniteMap l u))
      assoc‚Ä≤ _ (_ ‚Ü¶ _ ‚à∑[ _ ] _) (_ ‚Ü¶ _ ‚à∑[ _ ] _) (._ ‚Ü¶ _ ‚à∑[ _ ] _) |
            tri< _ _ k‚ÇÇ‚âÆk‚ÇÅ | tri< k‚ÇÇ<k‚ÇÅ _ _ | [ _ ] | [ _ ] | tri‚âà _ refl _ = ‚ä•-elim (k‚ÇÇ‚âÆk‚ÇÅ k‚ÇÇ<k‚ÇÅ)
      assoc‚Ä≤ _ (k‚ÇÅ ‚Ü¶ _ ‚à∑[ _ ] _) (k‚ÇÇ ‚Ü¶ _ ‚à∑[ _ ] _) (k‚ÇÉ ‚Ü¶ _ ‚à∑[ _ ] _) |
            tri< _ _ _ | tri< _ _ _ | [ _ ] | [ _ ] | tri> k‚ÇÅ‚âÆk‚ÇÉ _ _ =
         ‚ä•-elim (k‚ÇÅ‚âÆk‚ÇÉ (<‚Å∫-trans {[ k‚ÇÅ ]} {[ k‚ÇÇ ]} {[ k‚ÇÉ ]} _ _))
      assoc‚Ä≤ {l} {u} {‚àô} assoc-‚àô (k ‚Ü¶ v‚ÇÅ ‚à∑[ l<k ] m‚ÇÅ) (k‚Ä≤ ‚Ü¶ v‚ÇÇ ‚à∑[ _ ] m‚ÇÇ) (.k‚Ä≤ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] m‚ÇÉ)
            | tri< k‚ÇÅ<k‚ÇÇ _ _ | tri‚âà _ refl _ | [ eq ] | [ _ ] rewrite eq =
         begin
            k ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] unionWith‚Ä≤ ‚àô (unionWith‚Ä≤ ‚àô m‚ÇÅ (k‚Ä≤ ‚Ü¶ v‚ÇÇ ‚à∑[ _ ] m‚ÇÇ)) (k‚Ä≤ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] m‚ÇÉ)
         ‚â°‚ü® cong (Œª m ‚Üí k ‚Ü¶ v‚ÇÅ ‚à∑[ l<k ] m) (assoc‚Ä≤ assoc-‚àô m‚ÇÅ (k‚Ä≤ ‚Ü¶ v‚ÇÇ ‚à∑[ _ ] m‚ÇÇ) (k‚Ä≤ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] m‚ÇÉ)) ‚ü©
            k ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] unionWith‚Ä≤ ‚àô m‚ÇÅ (unionWith‚Ä≤ ‚àô (k‚Ä≤ ‚Ü¶ v‚ÇÇ ‚à∑[ _ ] m‚ÇÇ) (k‚Ä≤ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] m‚ÇÉ))
         ‚â°‚ü® cong (Œª m ‚Üí k ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] unionWith‚Ä≤ ‚àô m‚ÇÅ m) (unionWith‚Ä≤‚â° {k‚Ä≤} k‚ÇÅ<k‚ÇÇ m‚ÇÇ m‚ÇÉ) ‚ü©
            k ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] unionWith‚Ä≤ ‚àô m‚ÇÅ (k‚Ä≤ ‚Ü¶ v‚ÇÇ ‚ü® ‚àô ‚ü© v‚ÇÉ ‚à∑[ _ ] unionWith‚Ä≤ ‚àô m‚ÇÇ m‚ÇÉ)
         ‚àé where open import Relation.Binary.EqReasoning (setoid (FiniteMap l u))
      assoc‚Ä≤ _ (k‚ÇÅ ‚Ü¶ _ ‚à∑[ _ ] _) (_ ‚Ü¶ _ ‚à∑[ _ ] _) (k‚ÇÉ ‚Ü¶ _ ‚à∑[ _ ] _) |
            tri< _ _ _ | tri> _ _ _ | [ _ ] | [ _ ] with compare [ k‚ÇÅ ] [ k‚ÇÉ ]
      assoc‚Ä≤ {l} {u} {‚àô} assoc-‚àô (k‚ÇÅ ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] m‚ÇÅ) (k‚ÇÇ ‚Ü¶ v‚ÇÇ ‚à∑[ _ ] m‚ÇÇ) (k‚ÇÉ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] m‚ÇÉ) |
            tri< k‚ÇÅ<k‚ÇÇ _ _ | tri> _ _ k‚ÇÉ<k‚ÇÇ | [ eq ] | [ _ ] | tri< k‚ÇÅ<k‚ÇÉ _ _ rewrite eq =
         begin
            k‚ÇÅ ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] unionWith‚Ä≤ ‚àô (unionWith‚Ä≤ ‚àô m‚ÇÅ (k‚ÇÇ ‚Ü¶ v‚ÇÇ ‚à∑[ _ ] m‚ÇÇ)) (k‚ÇÉ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] m‚ÇÉ)
         ‚â°‚ü® cong (Œª m ‚Üí k‚ÇÅ ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] m) (assoc‚Ä≤ assoc-‚àô m‚ÇÅ (k‚ÇÇ ‚Ü¶ v‚ÇÇ ‚à∑[ _ ] m‚ÇÇ) (k‚ÇÉ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] m‚ÇÉ)) ‚ü©
            k‚ÇÅ ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] unionWith‚Ä≤ ‚àô m‚ÇÅ (unionWith‚Ä≤ ‚àô (k‚ÇÇ ‚Ü¶ v‚ÇÇ ‚à∑[ k‚ÇÅ<k‚ÇÇ ] m‚ÇÇ) (k‚ÇÉ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] m‚ÇÉ))
         ‚â°‚ü® cong (Œª m ‚Üí k‚ÇÅ ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] unionWith‚Ä≤ ‚àô m‚ÇÅ m) (unionWith‚Ä≤> k‚ÇÅ<k‚ÇÇ k‚ÇÅ<k‚ÇÉ k‚ÇÉ<k‚ÇÇ m‚ÇÇ m‚ÇÉ) ‚ü©
            k‚ÇÅ ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] unionWith‚Ä≤ ‚àô m‚ÇÅ (k‚ÇÉ ‚Ü¶ v‚ÇÉ ‚à∑[ k‚ÇÅ<k‚ÇÉ ] unionWith‚Ä≤ ‚àô (k‚ÇÇ ‚Ü¶ v‚ÇÇ ‚à∑[ k‚ÇÉ<k‚ÇÇ ] m‚ÇÇ) m‚ÇÉ)
         ‚àé where open import Relation.Binary.EqReasoning (setoid (FiniteMap l u))
      assoc‚Ä≤ {‚àô = ‚àô} assoc-‚àô (k ‚Ü¶ v‚ÇÅ ‚à∑[ l<k ] m‚ÇÅ) (k‚Ä≤ ‚Ü¶ v‚ÇÇ ‚à∑[ _ ] m‚ÇÇ) (.k ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] m‚ÇÉ) |
            tri< _ _ _ | tri> _ _ _ | [ _ ] | [ _ ] | tri‚âà _ refl _ =
         cong (Œª xs ‚Üí k ‚Ü¶ v‚ÇÅ ‚ü® ‚àô ‚ü© v‚ÇÉ ‚à∑[ l<k ] xs) (assoc‚Ä≤ assoc-‚àô m‚ÇÅ (k‚Ä≤ ‚Ü¶ v‚ÇÇ ‚à∑[ _ ] m‚ÇÇ) m‚ÇÉ)
      assoc‚Ä≤ {l} {u} {‚àô} assoc-‚àô (k‚ÇÅ ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] m‚ÇÅ) (k‚ÇÇ ‚Ü¶ v‚ÇÇ ‚à∑[ _ ] m‚ÇÇ) (k‚ÇÉ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] m‚ÇÉ) |
            tri< k‚ÇÅ<k‚ÇÇ _ _ | tri> _ _ k‚ÇÉ<k‚ÇÇ | [ _ ] | [ _ ] | tri> _ _ k‚ÇÉ<k‚ÇÅ =
         begin
            k‚ÇÉ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] unionWith‚Ä≤ ‚àô (k‚ÇÅ ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] unionWith‚Ä≤ ‚àô m‚ÇÅ (k‚ÇÇ ‚Ü¶ v‚ÇÇ ‚à∑[ _ ] m‚ÇÇ)) m‚ÇÉ
         ‚â°‚ü® cong (Œª m ‚Üí k‚ÇÉ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] unionWith‚Ä≤ ‚àô m m‚ÇÉ) (sym (unionWith‚Ä≤< k‚ÇÉ<k‚ÇÅ k‚ÇÉ<k‚ÇÇ k‚ÇÅ<k‚ÇÇ m‚ÇÅ m‚ÇÇ)) ‚ü©
            k‚ÇÉ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] unionWith‚Ä≤ ‚àô (unionWith‚Ä≤ ‚àô (k‚ÇÅ ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] m‚ÇÅ) (k‚ÇÇ ‚Ü¶ v‚ÇÇ ‚à∑[ _ ] m‚ÇÇ)) m‚ÇÉ
         ‚â°‚ü® cong (Œª m ‚Üí k‚ÇÉ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] m) (assoc‚Ä≤ assoc-‚àô (k‚ÇÅ ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] m‚ÇÅ) (k‚ÇÇ ‚Ü¶ v‚ÇÇ ‚à∑[ _ ] m‚ÇÇ) m‚ÇÉ) ‚ü©
            k‚ÇÉ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] unionWith‚Ä≤ ‚àô (k‚ÇÅ ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] m‚ÇÅ) (unionWith‚Ä≤ ‚àô (k‚ÇÇ ‚Ü¶ v‚ÇÇ ‚à∑[ _ ] m‚ÇÇ) m‚ÇÉ)
         ‚àé where open import Relation.Binary.EqReasoning (setoid (FiniteMap l u))
      assoc‚Ä≤ {‚àô = ‚àô} assoc-‚àô (k ‚Ü¶ v‚ÇÅ ‚à∑[ l<k ] m‚ÇÅ) (.k ‚Ü¶ v‚ÇÇ ‚à∑[ _ ] m‚ÇÇ) (k‚Ä≤ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] m‚ÇÉ) |
            tri‚âà _ refl _ | tri< _ _ _ | [ eq ] | [ eq‚Ä≤ ] rewrite eq | eq‚Ä≤ =
         cong (Œª m ‚Üí k ‚Ü¶ v‚ÇÅ ‚ü® ‚àô ‚ü© v‚ÇÇ ‚à∑[ l<k ] m) (assoc‚Ä≤ assoc-‚àô m‚ÇÅ m‚ÇÇ (k‚Ä≤ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] m‚ÇÉ))
      assoc‚Ä≤ {‚àô = ‚àô} assoc-‚àô (k ‚Ü¶ v‚ÇÅ ‚à∑[ l<k ] m‚ÇÅ) (.k ‚Ü¶ v‚ÇÇ ‚à∑[ _ ] m‚ÇÇ) (.k ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] m‚ÇÉ) |
            tri‚âà _ refl _ | tri‚âà _ refl _ | [ eq ] | [ _ ] rewrite eq =
         cong‚ÇÇ (Œª v m ‚Üí k ‚Ü¶ v ‚à∑[ l<k ] m) (assoc-‚àô v‚ÇÅ v‚ÇÇ v‚ÇÉ) (assoc‚Ä≤ assoc-‚àô m‚ÇÅ m‚ÇÇ m‚ÇÉ)
      assoc‚Ä≤ _ (k ‚Ü¶ _ ‚à∑[ _ ] _) (.k ‚Ü¶ _ ‚à∑[ _ ] _) (k‚Ä≤ ‚Ü¶ _ ‚à∑[ _ ] _) |
            tri‚âà _ refl _ | tri> _ _ _  | [ _ ] | [ _ ] with compare [ k ] [ k‚Ä≤ ]
      assoc‚Ä≤ _ (_ ‚Ü¶ _ ‚à∑[ _ ] _) (._ ‚Ü¶ _ ‚à∑[ _ ] _) (_ ‚Ü¶ _ ‚à∑[ _ ] _) |
            tri‚âà _ refl _ | tri> _ _ k‚ÇÉ<k‚ÇÅ  | [ _ ] | [ _ ] | tri< _ _ k‚ÇÉ‚âÆk‚ÇÅ = ‚ä•-elim (k‚ÇÉ‚âÆk‚ÇÅ k‚ÇÉ<k‚ÇÅ)
      assoc‚Ä≤ _ (_ ‚Ü¶ _ ‚à∑[ _ ] _) (._ ‚Ü¶ _ ‚à∑[ _ ] _) (._ ‚Ü¶ _ ‚à∑[ _ ] _) |
            tri‚âà _ refl _ | tri> _ k‚â¢k _  | [ _ ] | [ _ ] | tri‚âà _ refl _ = ‚ä•-elim (k‚â¢k refl)
      assoc‚Ä≤ {l} {u} {‚àô} assoc-‚àô (k ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] m‚ÇÅ) (._ ‚Ü¶ v‚ÇÇ ‚à∑[ _ ] m‚ÇÇ) (k‚Ä≤ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] m‚ÇÉ) |
            tri‚âà _ refl _ | tri> _ _ k‚Ä≤<k  | [ _ ] | [ _ ] | tri> _ _ _ =
         begin
            k‚Ä≤ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] unionWith‚Ä≤ ‚àô (k ‚Ü¶ v‚ÇÅ ‚ü® ‚àô ‚ü© v‚ÇÇ ‚à∑[ _ ] unionWith‚Ä≤ ‚àô m‚ÇÅ m‚ÇÇ) m‚ÇÉ
         ‚â°‚ü® cong (Œª m ‚Üí k‚Ä≤ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] (unionWith‚Ä≤ ‚àô m m‚ÇÉ)) (sym (unionWith‚Ä≤‚â° {k} k‚Ä≤<k m‚ÇÅ m‚ÇÇ)) ‚ü©
            k‚Ä≤ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] unionWith‚Ä≤ ‚àô (unionWith‚Ä≤ ‚àô (k ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] m‚ÇÅ) (k ‚Ü¶ v‚ÇÇ ‚à∑[ _ ] m‚ÇÇ)) m‚ÇÉ
         ‚â°‚ü® cong (Œª m ‚Üí k‚Ä≤ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] m) (assoc‚Ä≤ assoc-‚àô (k ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] m‚ÇÅ) (k ‚Ü¶ v‚ÇÇ ‚à∑[ _ ] m‚ÇÇ) m‚ÇÉ) ‚ü©
            k‚Ä≤ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] unionWith‚Ä≤ ‚àô (k ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] m‚ÇÅ) (unionWith‚Ä≤ ‚àô (k ‚Ü¶ v‚ÇÇ ‚à∑[ _ ] m‚ÇÇ) m‚ÇÉ)
         ‚àé where open import Relation.Binary.EqReasoning (setoid (FiniteMap l u))
      assoc‚Ä≤ assoc-‚àô (k‚ÇÅ ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] m‚ÇÅ) (k‚ÇÇ ‚Ü¶ v‚ÇÇ ‚à∑[ l<k‚ÇÇ ] m‚ÇÇ) (k‚ÇÉ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] m‚ÇÉ) |
            tri> _ _ _ | tri< _ _ _ | [ eq ] | [ eq‚Ä≤ ] rewrite eq | eq‚Ä≤ =
         cong (Œª m ‚Üí k‚ÇÇ ‚Ü¶ v‚ÇÇ ‚à∑[ l<k‚ÇÇ ] m) (assoc‚Ä≤ assoc-‚àô (k‚ÇÅ ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] m‚ÇÅ) m‚ÇÇ (k‚ÇÉ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] m‚ÇÉ))
      assoc‚Ä≤ {‚àô = ‚àô} assoc-‚àô (k ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] m‚ÇÅ) (k‚Ä≤ ‚Ü¶ v‚ÇÇ ‚à∑[ l<k‚Ä≤ ] m‚ÇÇ) (.k‚Ä≤ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] m‚ÇÉ) |
            tri> _ _ _ | tri‚âà _ refl _ | [ eq ] | [ eq‚Ä≤ ] rewrite eq | eq‚Ä≤ =
         cong (Œª m ‚Üí k‚Ä≤ ‚Ü¶ v‚ÇÇ ‚ü® ‚àô ‚ü© v‚ÇÉ ‚à∑[ l<k‚Ä≤ ] m) (assoc‚Ä≤ assoc-‚àô (k ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] m‚ÇÅ) m‚ÇÇ m‚ÇÉ)
      assoc‚Ä≤ _ (k‚ÇÅ ‚Ü¶ _ ‚à∑[ _ ] _) (_ ‚Ü¶ _ ‚à∑[ _ ] _) (k‚ÇÉ ‚Ü¶ _ ‚à∑[ _ ] _) |
            tri> _ _ _ | tri> _ _ _ | [ _ ] | [ eq ] rewrite eq with compare [ k‚ÇÅ ] [ k‚ÇÉ ]
      assoc‚Ä≤ _ (k‚ÇÅ ‚Ü¶ _ ‚à∑[ _ ] _) (k‚ÇÇ ‚Ü¶ _ ‚à∑[ _ ] _) (k‚ÇÉ ‚Ü¶ _ ‚à∑[ _ ] _) |
            tri> _ _ _ | tri> _ _ _ | [ _ ] | [ _ ] | tri< _ _ k‚ÇÉ‚âÆk‚ÇÅ =
         ‚ä•-elim (k‚ÇÉ‚âÆk‚ÇÅ (<‚Å∫-trans {[ k‚ÇÉ ]} {[ k‚ÇÇ ]} {[ k‚ÇÅ ]} _ _))
      assoc‚Ä≤ _ (_ ‚Ü¶ _ ‚à∑[ _ ] _) (_ ‚Ü¶ _ ‚à∑[ _ ] _) (._ ‚Ü¶ _ ‚à∑[ _ ] _) |
            tri> k‚ÇÅ‚âÆk‚ÇÇ _ _ | tri> _ _ k‚ÇÅ<k‚ÇÇ | [ _ ] | [ _ ] | tri‚âà _ refl _ = ‚ä•-elim (k‚ÇÅ‚âÆk‚ÇÇ k‚ÇÅ<k‚ÇÇ)
      assoc‚Ä≤ {l} {u} {‚àô} assoc-‚àô (k‚ÇÅ ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] m‚ÇÅ) (k‚ÇÇ ‚Ü¶ v‚ÇÇ ‚à∑[ _ ] m‚ÇÇ) (k‚ÇÉ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] m‚ÇÉ) |
            tri> _ _ k‚ÇÇ<k‚ÇÅ | tri> _ _ k‚ÇÉ<k‚ÇÇ | [ _ ] | [ _ ] | tri> _ _ k‚ÇÉ<k‚ÇÅ =
         begin
            k‚ÇÉ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] unionWith‚Ä≤ ‚àô (k‚ÇÇ ‚Ü¶ v‚ÇÇ ‚à∑[ _ ] unionWith‚Ä≤ ‚àô (k‚ÇÅ ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] m‚ÇÅ) m‚ÇÇ) m‚ÇÉ
         ‚â°‚ü® cong (Œª m ‚Üí k‚ÇÉ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] unionWith‚Ä≤ ‚àô m m‚ÇÉ) (sym (unionWith‚Ä≤> k‚ÇÉ<k‚ÇÅ k‚ÇÉ<k‚ÇÇ k‚ÇÇ<k‚ÇÅ m‚ÇÅ m‚ÇÇ)) ‚ü©
            k‚ÇÉ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] unionWith‚Ä≤ ‚àô (unionWith‚Ä≤ ‚àô (k‚ÇÅ ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] m‚ÇÅ) (k‚ÇÇ ‚Ü¶ v‚ÇÇ ‚à∑[ _ ] m‚ÇÇ)) m‚ÇÉ
         ‚â°‚ü® cong (Œª m ‚Üí k‚ÇÉ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] m) (assoc‚Ä≤ assoc-‚àô (k‚ÇÅ ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] m‚ÇÅ) (k‚ÇÇ ‚Ü¶ v‚ÇÇ ‚à∑[ _ ] m‚ÇÇ) m‚ÇÉ) ‚ü©
            k‚ÇÉ ‚Ü¶ v‚ÇÉ ‚à∑[ _ ] unionWith‚Ä≤ ‚àô (k‚ÇÅ ‚Ü¶ v‚ÇÅ ‚à∑[ _ ] m‚ÇÅ) (unionWith‚Ä≤ ‚àô (k‚ÇÇ ‚Ü¶ v‚ÇÇ ‚à∑[ _ ] m‚ÇÇ) m‚ÇÉ)
         ‚àé  where open import Relation.Binary.EqReasoning (setoid (FiniteMap l u))

      assoc : ‚àÄ {l u} {‚àô : ‚àÄ {k} ‚Üí Op‚ÇÇ (Value k)} ‚Üí
              (‚àÄ {k} ‚Üí Associative _‚â°_ (‚àô {k})) ‚Üí Associative _‚â°_ (unionWith {l} {u} ‚àô)
      assoc assoc-‚àô x y z = assoc‚Ä≤ assoc-‚àô x y z

      identityÀ° : ‚àÄ {l u} {‚àô : ‚àÄ {k} ‚Üí Op‚ÇÇ (Value k)} (l<u : l <‚Å∫ u) ‚Üí
                 LeftIdentity _‚â°_ ([] l<u) (unionWith {l} {u} ‚àô)
      identityÀ° _ ([] _) = refl
      identityÀ° _ (_ ‚Ü¶ _ ‚à∑[ _ ] _) = refl

      -- Finite maps preserve commutative monoidal structure.
      cm : ‚àÄ {l u} {‚àô : ‚àÄ {k} ‚Üí Op‚ÇÇ (Value k)} {Œµ : ‚àÄ {k} ‚Üí Value k} ‚Üí (l<u : l <‚Å∫ u) ‚Üí
           (‚àÄ {k} ‚Üí IsCommutativeMonoid _‚â°_ (‚àô {k}) (Œµ {k})) ‚Üí
           IsCommutativeMonoid _‚â°_ (unionWith {l} {u} ‚àô) ([] l<u)
      cm {‚àô = ‚àô} l<u cm-‚àô-Œµ = record {
            isSemigroup = record {
                  isEquivalence = ‚â°-isEquivalence;
                  assoc = assoc (IsCommutativeMonoid.assoc cm-‚àô-Œµ);
                  ‚àô-cong = cong‚ÇÇ (unionWith ‚àô)
               };
            identityÀ° = identityÀ° l<u;
            comm = comm (IsCommutativeMonoid.comm cm-‚àô-Œµ)
         }

      idem : ‚àÄ {l u} {‚àô : ‚àÄ {k} ‚Üí Op‚ÇÇ (Value k)} ‚Üí
             (‚àÄ {k} ‚Üí Idempotent _‚â°_ (‚àô {k})) ‚Üí Idempotent _‚â°_ (unionWith {l} {u} ‚àô)
      idem _ ([] _) = refl
      idem idem-‚àô (k ‚Ü¶ _ ‚à∑[ _ ] _) with compare [ k ] [ k ]
      idem idem-‚àô (k ‚Ü¶ v ‚à∑[ _ ] m) | tri‚âà _ refl _ =
         cong‚ÇÇ (Œª v m ‚Üí k ‚Ü¶ v ‚à∑[ _ ] m) (idem-‚àô v) (idem idem-‚àô m)
      idem _ (_ ‚Ü¶ _ ‚à∑[ _ ] _) | tri< _ k‚â¢k _ = ‚ä•-elim (k‚â¢k refl)
      idem _ (_ ‚Ü¶ _ ‚à∑[ _ ] _) | tri> _ k‚â¢k _ = ‚ä•-elim (k‚â¢k refl)

      -- Could generalise this to Any, as per Data.List.
      data _‚Ü¶_‚àà_ (k : Key) (v : Value k) {l u} : FiniteMap l u ‚Üí Set (ùíå ‚äî ùíó ‚äî ‚Ñì) where
         here : ‚àÄ {m} ‚Üí (_ : l <‚Å∫ [ k ]) ‚Üí k ‚Ü¶ v ‚àà (k ‚Ü¶ v ‚à∑[ _ ] m)
         there : ‚àÄ {k‚Ä≤ v‚Ä≤ m} ‚Üí (_ : l <‚Å∫ [ k‚Ä≤ ]) ‚Üí k ‚Ü¶ v ‚àà m ‚Üí k ‚Ü¶ v ‚àà (k‚Ä≤ ‚Ü¶ v‚Ä≤ ‚à∑[ _ ] m)

      -- A tree-like way of constructing a finite map, which we could use to convert an (indexed) AVL tree to a
      -- finite map. It's not so easy to convert the other way around, at least not so as to form an isomorphism,
      -- because AVL trees don't use proof-irrelevance for the ordering constraints (which they could, I think).
      -- We would first need to switch Data.AVL to use Data.Extended-key.
      construct : ‚àÄ {l u} ‚Üí (k : Key) ‚Üí (v : Value k) ‚Üí FiniteMap l [ k ] ‚Üí FiniteMap [ k ] u ‚Üí FiniteMap l u
      construct k v ([] _) m = k ‚Ü¶ v ‚à∑[ _ ] m
      construct k v (k‚Ä≤ ‚Ü¶ v‚Ä≤ ‚à∑[ _ ] m) m‚Ä≤ = k‚Ä≤ ‚Ü¶ v‚Ä≤ ‚à∑[ _ ] construct k v m m‚Ä≤

      syntax construct k v m m‚Ä≤ = m ++ k ‚Ü¶ v ‚à∑ m‚Ä≤

   -- Finite maps with hidden bounds fixed at ‚ä•‚Å∫ and ‚ä§‚Å∫.
   open Indexed using ([]; _‚Ü¶_‚à∑[_]_)

   data FiniteMap : Set (ùíå ‚äî ùíó ‚äî ‚Ñì) where
      finMap : Indexed.FiniteMap ‚ä•‚Å∫ ‚ä§‚Å∫ ‚Üí FiniteMap

   empty : FiniteMap
   empty = finMap ([] _)

   singleton : (k : Key) ‚Üí Value k ‚Üí FiniteMap
   singleton k v = finMap (k ‚Ü¶ v ‚à∑[ _ ] ([] _))

   unionWith : (‚àÄ {k} ‚Üí Op‚ÇÇ (Value k)) ‚Üí Op‚ÇÇ FiniteMap
   unionWith ‚àô (finMap m) (finMap m‚Ä≤) = finMap (Indexed.unionWith‚Ä≤ ‚àô m m‚Ä≤)

   data _‚Ü¶_‚àà_ (k : Key) (v : Value k) : FiniteMap ‚Üí Set (ùíå ‚äî ùíó ‚äî ‚Ñì) where
      finMap : ‚àÄ {m} ‚Üí k Indexed.‚Ü¶ v ‚àà m ‚Üí k ‚Ü¶ v ‚àà finMap m

   comm : {‚àô : ‚àÄ {k} ‚Üí Op‚ÇÇ (Value k)} ‚Üí (‚àÄ {k} ‚Üí Commutative _‚â°_ (‚àô {k})) ‚Üí Commutative _‚â°_ (unionWith ‚àô)
   comm comm-‚àô (finMap x) (finMap y) = cong finMap (Indexed.comm comm-‚àô x y)

   assoc : {‚àô : ‚àÄ {k} ‚Üí Op‚ÇÇ (Value k)} ‚Üí (‚àÄ {k} ‚Üí Associative _‚â°_ (‚àô {k})) ‚Üí Associative _‚â°_ (unionWith ‚àô)
   assoc assoc-‚àô (finMap x) (finMap y) (finMap z) = cong finMap (Indexed.assoc assoc-‚àô x y z)

   identityÀ° : {‚àô : ‚àÄ {k} ‚Üí Op‚ÇÇ (Value k)} ‚Üí LeftIdentity _‚â°_ (finMap ([] _)) (unionWith ‚àô)
   identityÀ° (finMap x) = cong finMap (Indexed.identityÀ° (lift tt) x)

   -- Finite maps preserve commutative monoidal structure. Move this to Data.FiniteMap.Properties?
   cm : {‚àô : ‚àÄ {k} ‚Üí Op‚ÇÇ (Value k)} {Œµ : ‚àÄ {k} ‚Üí Value k} ‚Üí
        (‚àÄ {k} ‚Üí IsCommutativeMonoid _‚â°_ (‚àô {k}) (Œµ {k})) ‚Üí IsCommutativeMonoid _‚â°_ (unionWith ‚àô) (finMap ([] _))
   cm {‚àô} cm-‚àô-Œµ = record {
         isSemigroup = record {
               isEquivalence = ‚â°-isEquivalence;
               assoc = assoc (IsCommutativeMonoid.assoc cm-‚àô-Œµ);
               ‚àô-cong = cong‚ÇÇ (unionWith ‚àô)
            };
         identityÀ° = identityÀ°;
         comm = comm (IsCommutativeMonoid.comm cm-‚àô-Œµ)
      }

   idem : {‚àô : ‚àÄ {k} ‚Üí Op‚ÇÇ (Value k)} ‚Üí (‚àÄ {k} ‚Üí Idempotent _‚â°_ (‚àô {k})) ‚Üí Idempotent _‚â°_ (unionWith ‚àô)
   idem idem-‚àô (finMap x) = cong finMap (Indexed.idem idem-‚àô x)
